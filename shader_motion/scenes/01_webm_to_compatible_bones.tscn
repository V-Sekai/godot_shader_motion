[gd_scene load_steps=5 format=3 uid="uid://bvs6xjrdksqv2"]

[ext_resource type="PackedScene" uid="uid://cl1x561gtew3c" path="res://shader_motion/core/shader_motion_mecanim_bone.tscn" id="2_tblnc"]

[sub_resource type="GDScript" id="GDScript_q2ump"]
script/source = "extends VBoxContainer

@export var shadermotion_bone_analyzer: PackedScene
@export var shadermotion_frame_pixels_display: TextureRect

@export var analyzed_bones_list: Container
@export var analyzed_pixels: TileFrames = load(\"res://shader_motion/frames/result_frames.res\")

@export var bone_info_scene: PackedScene
@export var result_bones_list: Container

@export var skeleton_root_path: String
@export var animated_node_path: NodePath


func _generate_dummy_bones_array() -> Array[Node3D]:
	var bones: Array[Node3D] = []
	var bones_names = ShaderMotionHelpers.MecanimBodyBone.keys()
	bones.resize(ShaderMotionHelpers.MecanimBodyBone.LastBone)

	for bone in range(0, int(ShaderMotionHelpers.MecanimBodyBone.LastBone)):
		var bone_node: Node3D = Node3D.new()
		bone_node.name = bones_names[bone]
		bones[bone] = bone_node
	return bones

var skeleton_bones: Array[Node3D] = _generate_dummy_bones_array()

var animation_names : Array[float]

var animation : Animation = Animation.new()

# Called when the node enters the scene tree for the first time.
func _ready():
	var should_stop: bool = NodeHelpers.stop_if_any_is_null(
		self,
		[
			shadermotion_bone_analyzer,
			shadermotion_frame_pixels_display,
			analyzed_bones_list,
			analyzed_pixels,
			bone_info_scene,
			result_bones_list
		],
		\"ShaderMotion to Mecanim Bones\"
	)
	if should_stop:
		return

	NodeHelpers.remove_children_from(analyzed_bones_list)
	var current_animation_names : Array = analyzed_pixels.tiles.keys()
	current_animation_names.pop_back()
	for animation in current_animation_names:
		animation_names.push_back(animation)
	animation.length = current_animation_names.back()
	print(animation.length)
	
	var bone_names = ShaderMotionHelpers.MecanimBodyBone.keys()

	for bone in range(0, int(ShaderMotionHelpers.MecanimBodyBone.LastBone)):
		if skeleton_bones[bone].quaternion == NodeHelpers.invalid_quaternion:
			continue
		var unity_bone_rotation: Quaternion = skeleton_bones[bone].quaternion
		var godot_rotation: Quaternion = (Basis.FLIP_X.inverse() * Basis(unity_bone_rotation) * Basis.FLIP_X).get_rotation_quaternion()
		var bone_name: String = bone_names[bone]
		var animation_path: NodePath = NodePath(\"%s:%s\" % [skeleton_root_path, bone_name])

		var current_index: int = animation.get_track_count()
		animation.add_track(Animation.TYPE_ROTATION_3D)
		animation.track_set_path(current_index, animation_path)
		animation.track_set_interpolation_type(current_index, Animation.INTERPOLATION_LINEAR)

	var hips_bone = ShaderMotionHelpers.MecanimBodyBone.Hips
	var bone_name: String = bone_names[hips_bone]
	var animation_path: NodePath = NodePath(\"%s:%s\" % [skeleton_root_path, bone_name])

	var current_index: int = animation.get_track_count()
	animation.add_track(Animation.TYPE_POSITION_3D)
	animation.track_set_path(current_index, animation_path)
	animation.track_set_interpolation_type(current_index, Animation.INTERPOLATION_LINEAR)

	print(animation_names)
	
func _process(delta):
	calc_frame()
		
func calc_frame() -> void:
	if not animation_names.size():
		get_tree().quit()
		return
	var animation_time = animation_names[0]
	animation_names.pop_front()
	var motions: ShaderMotionHelpers.ParsedMotions = ShaderMotionHelpers.ParsedMotions.new()
	var mecanim_bone_names = ShaderMotionHelpers.MecanimBodyBone.keys()
	var bone_names = ShaderMotionHelpers.MecanimBodyBone.keys()
	for bone in range(0, int(ShaderMotionHelpers.MecanimBodyBone.LastBone)):
		var analyzer = shadermotion_bone_analyzer.instantiate()
		analyzed_bones_list.add_child(analyzer)
		analyzer.analyze_bone_from(analyzed_pixels, animation_time, bone, mecanim_bone_names[bone])
		motions.swing_twists[bone].set_motion_data(analyzer.computed_swing_twist, analyzer.computed_rotation)

		if bone == ShaderMotionHelpers.MecanimBodyBone.Hips:
			motions.hips.set_transform(
				analyzer.computed_swing_twist, analyzer.computed_rotation, analyzer.computed_scale
			)
		analyzer.queue_free()
	print(animation_time)
	var precomputed_skeleton_human_scale: float = 0.749392
	ShaderMotionHelpers._shadermotion_apply_human_pose(skeleton_bones, precomputed_skeleton_human_scale, motions)

	for bone in range(0, int(ShaderMotionHelpers.MecanimBodyBone.LastBone)):
		var unity_bone_rotation: Quaternion = skeleton_bones[bone].quaternion.normalized()
		if unity_bone_rotation == NodeHelpers.invalid_quaternion:
			continue
		var godot_rotation: Quaternion = (Basis.FLIP_X.inverse() * Basis(unity_bone_rotation) * Basis.FLIP_X).get_rotation_quaternion()
		var bone_name: String = bone_names[bone]
		var animation_path: NodePath = NodePath(\"%s:%s\" % [skeleton_root_path, bone_name])

		var current_index: int = animation.find_track(animation_path, Animation.TYPE_ROTATION_3D)
		if current_index == -1:
			continue
		animation.rotation_track_insert_key(current_index, animation_time, godot_rotation)

	var hips_bone = ShaderMotionHelpers.MecanimBodyBone.Hips
	var bone_name: String = bone_names[hips_bone]
	var animation_path: NodePath = NodePath(\"%s:%s\" % [skeleton_root_path, bone_name])

	var current_index: int = animation.find_track(animation_path, Animation.TYPE_POSITION_3D)
	if current_index != -1:
		var bone_position: Vector3 = skeleton_bones[hips_bone].position
		bone_position.z = -bone_position.z
		animation.position_track_insert_key(current_index, animation_time, bone_position)

	ResourceSaver.save(animation, \"res://shader_motion/animations/exported_animation.tres\")
"

[sub_resource type="GDScript" id="GDScript_8m4vw"]
script/source = "extends Node

@export var ui_name: Label
@export var ui_position: Label
@export var ui_rotation: Label


func _ready():
	NodeHelpers.stop_if_any_is_null(self, [ui_name, ui_position, ui_rotation], \"Show Bone Info\")


func show_bone(bone: Node3D):
	ui_name.text = bone.name
	ui_position.text = str(bone.position)
	if bone.quaternion.is_finite():
		ui_rotation.text = str(bone.quaternion)
	else:
		ui_rotation.text = \"\"
"

[sub_resource type="PackedScene" id="PackedScene_7o7e4"]
_bundled = {
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("PanelContainer", "PanelContainer", "script", "ui_name", "ui_position", "ui_rotation", "MarginContainer", "MarginContainer", "layout_mode", "theme_override_constants/margin_left", "VBoxContainer", "GridContainer", "layout_mode", "columns", "NameLabel", "Label", "layout_mode", "text", "horizontal_alignment", "NameValue", "Label", "layout_mode", "PositionLabel", "Label", "layout_mode", "text", "horizontal_alignment", "PositionValue", "Label", "layout_mode", "RotationLabel", "Label", "layout_mode", "text", "horizontal_alignment", "RotationValue", "Label", "layout_mode"),
"node_count": 9,
"node_paths": [NodePath("."), NodePath("./MarginContainer"), NodePath("./MarginContainer/VBoxContainer"), NodePath("./MarginContainer/VBoxContainer"), NodePath("./MarginContainer/VBoxContainer"), NodePath("./MarginContainer/VBoxContainer"), NodePath("./MarginContainer/VBoxContainer"), NodePath("./MarginContainer/VBoxContainer")],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 4, 2, 0, 1073741827, 1, 1073741828, 2, 1073741829, 3, 0, 1073741824, 0, 7, 6, -1, 2, 8, 4, 9, 5, 0, 1073741825, 0, 11, 10, -1, 2, 12, 6, 13, 7, 0, 1073741826, 0, 15, 14, -1, 3, 16, 8, 17, 9, 18, 10, 0, 1073741827, 0, 20, 19, -1, 1, 21, 11, 0, 1073741828, 0, 23, 22, -1, 3, 24, 12, 25, 13, 26, 14, 0, 1073741829, 0, 28, 27, -1, 1, 29, 15, 0, 1073741830, 0, 31, 30, -1, 3, 32, 16, 33, 17, 34, 18, 0, 1073741831, 0, 36, 35, -1, 1, 37, 19, 0),
"variants": [SubResource("GDScript_8m4vw"), NodePath("MarginContainer/VBoxContainer/NameValue"), NodePath("MarginContainer/VBoxContainer/PositionValue"), NodePath("MarginContainer/VBoxContainer/RotationValue"), 2, 8, 2, 2, 2, "Name : ", 2, 2, 2, "Position : ", 2, 2, 2, "Rotation : ", 2, 2],
"version": 2
}

[node name="Control" type="VBoxContainer" node_paths=PackedStringArray("shadermotion_frame_pixels_display", "analyzed_bones_list", "result_bones_list")]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_q2ump")
shadermotion_bone_analyzer = ExtResource("2_tblnc")
shadermotion_frame_pixels_display = NodePath("")
analyzed_bones_list = NodePath("")
bone_info_scene = SubResource("PackedScene_7o7e4")
result_bones_list = NodePath("")
skeleton_root_path = "%GeneralSkeleton"

[node name="Node3D" type="Node3D" parent="."]
transform = Transform3D(6.12303e-17, 0, -1, 0, 1, 0, 1, 0, 6.12303e-17, 0, 0, 0)
rotation_edit_mode = 1
